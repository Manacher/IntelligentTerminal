definitions:
  request.UserLoginReq:
    properties:
      account:
        type: string
      password:
        type: string
    type: object
  request.UserModifyReq:
    properties:
      nickname:
        type: string
      tags:
        items:
          type: integer
        type: array
    type: object
  request.UserPasswordChangeReq:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    type: object
  request.UserRegisterReq:
    properties:
      account:
        type: string
      nickname:
        type: string
      password:
        type: string
      tags:
        items:
          type: integer
        type: array
    type: object
info:
  contact: {}
  description: This is the API document of Intelligent Terminal Backend
  title: Intelligent Terminal Backend API
  version: "0.1"
paths:
  /hello:
    get:
      produces:
      - application/json
      responses: {}
      summary: init test function
      tags:
      - Test
  /test:
    get:
      produces:
      - application/json
      responses: {}
      summary: used to test function
      tags:
      - Test
  /test/upload:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: the avatar image file selected by the user
        in: formData
        name: file
        type: file
      responses: {}
      summary: used to test the file upload function
      tags:
      - Test
  /user/avatarUpdate:
    post:
      parameters:
      - description: the avatar image file selected by the user
        in: formData
        name: file
        type: file
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: used to upload image and replace user's avatar as the uploaded image
      tags:
      - User
  /user/detail:
    get:
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: integer
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: used to get the target user's detailed information
      tags:
      - User
  /user/follow:
    get:
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: integer
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: used to follow other people
      tags:
      - User
  /user/followerList:
    get:
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: integer
      - description: page
        in: query
        name: page
        required: true
        type: integer
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: used to get the user's follower list
      tags:
      - User
  /user/login:
    post:
      parameters:
      - description: the passed-in parameter of login function
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.UserLoginReq'
      responses: {}
      summary: used to authorize user and return jwt token, id
      tags:
      - User
  /user/modify:
    put:
      parameters:
      - description: the passed-in parameter of modify function
        in: body
        name: UserModifyReq
        required: true
        schema:
          $ref: '#/definitions/request.UserModifyReq'
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: used to modify the user's personal information
      tags:
      - User
  /user/passwordChange:
    put:
      parameters:
      - description: old password and new password
        in: body
        name: UserPasswordChangeReq
        required: true
        schema:
          $ref: '#/definitions/request.UserPasswordChangeReq'
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: used to modify the user's password
      tags:
      - User
  /user/register:
    post:
      parameters:
      - description: the passed-in parameter of register function
        in: body
        name: UserRegisterReq
        required: true
        schema:
          $ref: '#/definitions/request.UserRegisterReq'
      responses: {}
      summary: used to register new account
      tags:
      - User
  /user/subscribedList:
    get:
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: integer
      - description: page
        in: query
        name: page
        required: true
        type: integer
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: used to get the user's subscribed list
      tags:
      - User
  /user/tagList:
    get:
      responses: {}
      summary: used to get all the tag
      tags:
      - User
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"

definitions:
  request.UserLoginReq:
    properties:
      account:
        type: string
      password:
        type: string
    type: object
  request.UserRegisterReq:
    properties:
      account:
        type: string
      name:
        type: string
      nickname:
        type: string
      password:
        type: string
    type: object
info:
  contact: {}
paths:
  /hello:
    get:
      produces:
      - application/json
      responses: {}
      summary: init test function
  /test:
    get:
      produces:
      - application/json
      responses: {}
      summary: used to test function
  /test/upload:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: the avatar image file selected by the user
        in: formData
        name: file
        type: file
      responses: {}
      summary: used to test the file upload function
  /user/detail:
    get:
      responses: {}
      summary: used to get the target user's detailed information
  /user/follower:
    get:
      responses: {}
      summary: used to get the user's follower list
  /user/login:
    post:
      parameters:
      - description: the passed-in parameter of login function
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.UserLoginReq'
      responses: {}
      summary: used to authorize user and return jwt token
  /user/modify:
    put:
      responses: {}
      summary: used to modify the user's personal information
  /user/password:
    put:
      responses: {}
      summary: used to modify the user's password
  /user/register:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: the passed-in parameter of register function
        in: body
        name: UserRegisterReq
        required: true
        schema:
          $ref: '#/definitions/request.UserRegisterReq'
      - description: the avatar image file selected by the user
        in: formData
        name: file
        type: file
      responses: {}
      summary: used to register new account
  /user/subscribed:
    get:
      responses: {}
      summary: used to get the user's subscribed list
swagger: "2.0"
